// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Habit {
  id         String          @id @default(uuid()) //@id informa que esta é uma chave primaria e @default(uuid()) informa o padrão do id
  title      String
  created_at DateTime
  // Então, utilizamos o @@map para alterar o nome da tabela que será criada
  dayHabits  DayHabit[]
  weekDays   habitWeekDays[]

  @@map("habits") // Sem esta linha, o nome da tabela será o nome do model, neste caso Habit
}

//obs: Migration é algo como um versionamento do banco de dados, assim como temos o git para código, temos a migration para db
// entao para "commitar"uma alteracão no banco de dados, precisamos rodar o comando: npx prisma migrate dev    
//em seguida devemos informar o texto desse "commit" por ex: create table habits  (Sem aspas nem nada)
//observe que um arquivo será criado em prisma/migrations/(dataehoraeseg_nome_do_commit)

//o prisma dispensa qualquer tipo de ferraments extra para leitura e visualização dos dados no db, basta rodar o comando: npx prisma studio

model Day {
  id String @id @default(uuid())

  date      DateTime
  dayHabits DayHabit[]

  @@unique([date])
  @@map("days")
}

model habitWeekDays {
  id       String @id @default(uuid())
  habit_id String
  week_day Int

  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, week_day])
  @@map("habit_week_days")
}

model DayHabit {
  id String @id @default(uuid())

  day_id   String
  habit_id String

  day   Day   @relation(fields: [day_id], references: [id])
  habit Habit @relation(fields: [habit_id], references: [id])

  @@unique([habit_id, day_id])
  @@map("day_habits")
}
